type User implements Node {
  id: ID!
  email: String
  auth0UserId: String
  omiseCustomerId: String
  role: ROLE

  avatar: UserPhoto
  posts: [Post!]!
  profile: Profile
  favorites: [Favorite!]!

  bookings: [Booking!]!
  reviews: [Review!]!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  allUsers(
    filter: UserFilter,
    orderBy: UserOrderBy,
    skip: Int,
    after: String,
    before: String,
    first: Int,
    last: Int,
  ): [User!]!

  User(auth0UserId: String, id: ID, omiseCustomerId: String): User

  _allUsersMeta(
    filter: UserFilter,
    orderBy: UserOrderBy,
    skip: Int,
    after: String,
    before: String,
    first: Int,
    last: Int,
  ): _QueryMeta!
}

type Mutation {
  authenticateUser(accessToken: String!): AuthenticateUserPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
}
